Table "assignees" {
    "repository" varchar [note: 'Repository where the assignee is assigned']
    "login" varchar [note: 'Username of the assignee']
    "id" integer [note: 'Unique identifier of the assignee']
    "node_id" varchar [note: 'Node ID of the assignee']
    "avatar_url" varchar [note: 'URL of the assignee\'s avatar image']
    "gravatar_id" varchar [note: 'Gravatar ID of the assignee']
    "url" varchar [note: 'URL of the assignee\'s account']
    "html_url" varchar [note: 'URL of the assignee\'s GitHub profile']
    "followers_url" varchar [note: 'URL of the assignee\'s followers']
    "following_url" varchar [note: 'URL of the assignee\'s following']
    "gists_url" varchar [note: 'URL of the assignee\'s gists']
    "starred_url" varchar [note: 'URL of the assignee\'s starred items']
    "subscriptions_url" varchar [note: 'URL of the assignee\'s subscriptions']
    "organizations_url" varchar [note: 'URL of the assignee\'s organizations']
    "repos_url" varchar [note: 'URL of the assignee\'s repositories']
    "events_url" varchar [note: 'URL of the assignee\'s events']
    "received_events_url" varchar [note: 'URL of the assignee\'s received events']
    "type" varchar [note: 'Type of the assignee\'s account']
    "site_admin" boolean [note: 'Boolean indicating if the assignee is a site administrator']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "branches" {
    "repository" varchar [note: 'Details about the repository associated with the branch.']
    "name" varchar [note: 'The name of the branch.']
    "commit" json [note: 'Details about the commit associated with the branch.']
    "protected" boolean [note: 'Indicates if the branch is protected.']
    "protection" json [note: 'Details about the protection settings of the branch.']
    "protection_url" varchar [note: 'URL to manage protection settings for the branch.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "collaborators" {
    "repository" varchar [note: 'Repository information related to the collaborator']
    "login" varchar [note: 'Username of the collaborator']
    "id" integer [note: 'Unique identifier of the collaborator']
    "node_id" varchar [note: 'Node ID of the collaborator']
    "avatar_url" varchar [note: 'URL of the collaborator\'s avatar image']
    "gravatar_id" varchar [note: 'Gravatar ID of the collaborator']
    "url" varchar [note: 'URL of the collaborator\'s GitHub API endpoint']
    "html_url" varchar [note: 'HTML URL of the collaborator\'s profile']
    "followers_url" varchar [note: 'URL of the followers of the collaborator']
    "following_url" varchar [note: 'URL of the users followed by the collaborator']
    "gists_url" varchar [note: 'URL of gists created by the collaborator']
    "starred_url" varchar [note: 'URL of the repositories starred by the collaborator']
    "subscriptions_url" varchar [note: 'URL of the repositories subscribed to by the collaborator']
    "organizations_url" varchar [note: 'URL of organizations the collaborator is associated with']
    "repos_url" varchar [note: 'URL of the repositories of the collaborator']
    "events_url" varchar [note: 'URL of the events related to the collaborator']
    "received_events_url" varchar [note: 'URL of events received by the collaborator']
    "type" varchar [note: 'Type of the collaborator (e.g., User)']
    "site_admin" boolean [note: 'Indicates if the collaborator is a site administrator']
    "role_name" varchar [note: 'Name of the collaborator\'s role']
    "permissions" json [note: 'The permissions assigned to the collaborators']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "comments" {
    "repository" varchar [note: 'Details about the repository to which the comment belongs']
    "id" integer [note: 'The unique identifier of the comment']
    "node_id" varchar [note: 'The unique identifier of the node']
    "user" json
    "url" varchar [note: 'The URL of the comment']
    "html_url" varchar [note: 'The URL of the comment on GitHub']
    "body" varchar [note: 'The content of the comment']
    "user_id" integer [note: 'The unique identifier of the user']
    "created_at" timestamp [note: 'The date and time the comment was created']
    "updated_at" timestamp [note: 'The date and time the comment was last updated']
    "issue_url" varchar [note: 'The URL of the issue to which the comment belongs']
    "author_association" varchar [note: 'The association of the comment author to the repository (e.g., owner, member, collaborator, contributor, etc.)']
    "reactions" json
    "performed_via_github_app" json [note: 'Details about the GitHub App that performed the action']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "commit_comment_reactions" {
    "id" integer
    "node_id" varchar
    "content" varchar
    "created_at" timestamp
    "user" json
    "repository" varchar
    "comment_id" integer
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "commit_comments" {
    "repository" varchar [note: 'Details of the repository to which the comment belongs']
    "html_url" varchar [note: 'The URL to view the comment on GitHub\'s web interface']
    "url" varchar [note: 'The API URL to fetch the details of the comment']
    "id" integer [note: 'The unique identifier of the comment']
    "node_id" varchar [note: 'The globally unique identifier for the comment']
    "body" varchar [note: 'The content of the comment']
    "path" varchar [note: 'The file path to which the comment is associated']
    "position" integer [note: 'The position in the file at which the comment is located']
    "line" integer [note: 'The line number in the file at which the comment is located']
    "commit_id" varchar [note: 'The identifier of the commit to which the comment is associated']
    "user" json
    "created_at" timestamp [note: 'The date and time when the comment was created']
    "updated_at" timestamp [note: 'The date and time when the comment was last updated']
    "author_association" varchar [note: 'The association of the user who made the comment with the repository (e.g., owner, collaborator, member, contributor)']
    "reactions" json
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "commits" {
    "repository" varchar [note: 'The repository where the commit was made.']
    "branch" varchar [note: 'The branch name where the commit was made.']
    "created_at" timestamp [note: 'The creation date and time of the commit.']
    "url" varchar [note: 'URL for accessing the commit data.']
    "sha" varchar [note: 'The SHA of the commit.']
    "node_id" varchar [note: 'The unique identifier of the commit node.']
    "html_url" varchar [note: 'URL for viewing the commit on GitHub.']
    "comments_url" varchar [note: 'URL for accessing comments on the commit.']
    "commit" json [note: 'Information about the commit including author, committer, tree, and verification details.']
    "author" json
    "committer" json
    "parents" array [note: 'List of parent commits of the current commit.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "contributor_activity" {
    "name" varchar [note: 'Name of the contributor']
    "email" varchar [note: 'Email address of the contributor']
    "login" varchar [note: 'GitHub username of the contributor']
    "id" integer [note: 'Unique identifier for the contributor']
    "node_id" varchar [note: 'Node ID of the contributor']
    "avatar_url" varchar [note: 'URL of the contributor\'s avatar image']
    "gravatar_id" varchar [note: 'ID associated with the contributor\'s Gravatar image']
    "url" varchar [note: 'URL of the contributor\'s profile']
    "html_url" varchar [note: 'URL of the contributor\'s profile page on GitHub']
    "followers_url" varchar [note: 'URL of the contributor\'s followers']
    "following_url" varchar [note: 'URL of the contributor\'s following']
    "gists_url" varchar [note: 'URL of the contributor\'s gists']
    "starred_url" varchar [note: 'URL of the starred repository']
    "subscriptions_url" varchar [note: 'URL of the contributor\'s subscriptions']
    "organizations_url" varchar [note: 'URL of the contributor\'s organizations']
    "repos_url" varchar [note: 'URL of the contributor\'s repositories']
    "events_url" varchar [note: 'URL of the contributor\'s events']
    "repository" varchar [note: 'Repository the contributor is associated with']
    "received_events_url" varchar [note: 'URL of the events received by the contributor']
    "type" varchar [note: 'Type of the contributor (e.g., User, Organization)']
    "site_admin" boolean [note: 'Boolean value indicating if the contributor is a site admin']
    "starred_at" timestamp [note: 'Date and time when the repository was starred by the contributor']
    "total" integer [note: 'Total activity count of the contributor']
    "weeks" array [note: 'Activity data of the contributor per week']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "deployments" {
    "url" varchar [note: 'URL to access more details about the deployment.']
    "id" integer [note: 'Unique identifier for the deployment.']
    "node_id" varchar [note: 'Node identifier for the deployment.']
    "task" varchar [note: 'Indicates the type of task being performed in the deployment.']
    "original_environment" varchar [note: 'Original environment name before promotion or changes.']
    "environment" varchar [note: 'The deployment environment (e.g., staging, production).']
    "description" varchar [note: 'Description provided for the deployment.']
    "created_at" timestamp [note: 'The timestamp when the deployment was created.']
    "updated_at" timestamp [note: 'The timestamp when the deployment was last updated.']
    "statuses_url" varchar [note: 'URL to retrieve the statuses of the deployment.']
    "repository_url" varchar [note: 'URL of the repository where the deployment originated.']
    "creator" json
    "sha" varchar [note: 'The SHA hash of the deployment.']
    "ref" varchar [note: 'The Git ref that was deployed.']
    "payload" varchar [note: 'Additional information or data associated with the deployment.']
    "transient_environment" boolean [note: 'Indicates if the environment is temporary or not persistent.']
    "production_environment" boolean [note: 'Indicates if the deployment is in a production environment.']
    "performed_via_github_app" varchar [note: 'Indicates if the deployment was performed via a GitHub App.']
    "repository" varchar [note: 'Details about the repository where the deployment originated.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "events" {
    "repository" varchar [note: 'Deprecated. Use \'repo\' field instead.']
    "type" varchar [note: 'Type of event that occurred.']
    "public" boolean [note: 'Indicates whether the event is public or not.']
    "payload" json [note: 'Additional event-specific data.']
    "repo" json [note: 'Information about the repository where the event occurred.']
    "actor" json
    "org" json [note: 'Information about the organization associated with the event.']
    "created_at" timestamp [note: 'The timestamp when the event occurred.']
    "id" varchar [note: 'Unique identifier for the event.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "issue_comment_reactions" {
    "id" integer
    "node_id" varchar
    "content" varchar
    "created_at" timestamp
    "user" json
    "repository" varchar
    "comment_id" integer
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "issue_events" {
    "repository" varchar [note: 'Details about a repository']
    "id" integer [note: 'The unique ID of the event']
    "node_id" varchar [note: 'The unique node ID of the event']
    "url" varchar [note: 'The URL of the event']
    "actor" json
    "event" varchar [note: 'The type of event that occurred']
    "commit_id" varchar [note: 'The ID of the commit related to the event']
    "commit_url" varchar [note: 'The URL to the commit related to the event']
    "created_at" timestamp [note: 'The timestamp when the event was created']
    "state_reason" varchar [note: 'The reason associated with the change in state of the issue event.']
    "label" json [note: 'Details about a label']
    "review_requester" json
    "issue" json [note: 'Information about the associated issue']
    "performed_via_github_app" json [note: 'Information about the GitHub App that triggered the event']
    "milestone" json [note: 'Details about a milestone']
    "assignee" json
    "assigner" json
    "project_card" json [note: 'Details about a project card']
    "dismissed_review" json [note: 'Details about a dismissed review']
    "requested_team" json [note: 'Details about a team requested for review']
    "rename" json [note: 'Details about a rename action']
    "requested_reviewer" json
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "issue_labels" {
    "repository" varchar [note: 'Information about the repository to which the label belongs.']
    "id" integer [note: 'Unique identifier for the label.']
    "node_id" varchar [note: 'A unique identifier for the label at the GitHub API level.']
    "url" varchar [note: 'URL that provides direct access to the label resource.']
    "name" varchar [note: 'The name of the label used for identification.']
    "description" varchar [note: 'Descriptive text providing additional information about the label.']
    "color" varchar [note: 'The color associated with the label, typically used for visual representation.']
    "default" boolean [note: 'Indicates if the label is the default label for the repository.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "issue_milestones" {
    "repository" varchar [note: 'Repository to which the milestone belongs']
    "url" varchar [note: 'API endpoint URL for the milestone']
    "html_url" varchar [note: 'URL to view the milestone in a web browser']
    "labels_url" varchar [note: 'URL to fetch labels associated with the milestone']
    "id" integer [note: 'Unique identifier for the milestone']
    "node_id" varchar [note: 'Unique identifier for the milestone node']
    "number" integer [note: 'Numeric identifier for the milestone']
    "state" varchar [note: 'Current state of the milestone (open/closed)']
    "title" varchar [note: 'Title or name of the milestone']
    "description" varchar [note: 'Brief description of the milestone']
    "creator" json
    "open_issues" integer [note: 'Total number of open issues within the milestone']
    "closed_issues" integer [note: 'Total number of issues closed within the milestone']
    "created_at" timestamp [note: 'Timestamp indicating when the milestone was created']
    "updated_at" timestamp [note: 'Timestamp indicating when the milestone was last updated']
    "closed_at" timestamp [note: 'Timestamp indicating when the milestone was closed']
    "due_on" timestamp [note: 'Timestamp indicating when the milestone is due']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "issue_reactions" {
    "id" integer [note: 'The unique identifier of the reaction']
    "node_id" varchar [note: 'The unique identifier of the reaction node']
    "content" varchar [note: 'The type of reaction (e.g., thumbs up, thumbs down, heart)']
    "created_at" timestamp [note: 'The date and time when the reaction was created']
    "user" json
    "repository" varchar [note: 'The repository to which the reaction belongs']
    "issue_number" integer [note: 'The issue number to which the reaction belongs']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "issue_timeline_events" {
    "repository" varchar [note: 'The repository associated with the issue']
    "issue_number" integer [note: 'The number of the issue']
    "labeled" varchar
    "unlabeled" varchar
    "milestoned" varchar
    "demilestoned" varchar
    "renamed" varchar
    "review_requested" varchar
    "review_request_removed" varchar
    "review_dismissed" varchar
    "locked" varchar
    "added_to_project" varchar
    "moved_columns_in_project" varchar
    "removed_from_project" varchar
    "converted_note_to_issue" varchar
    "comment" json [note: 'Timeline Comment Event']
    "cross_referenced" json [note: 'Timeline Cross Referenced Event']
    "committed" json [note: 'Timeline Committed Event']
    "closed" varchar
    "head_ref_deleted" varchar
    "head_ref_restored" varchar
    "reopened" varchar
    "reviewed" json [note: 'Timeline Reviewed Event']
    "commented" json [note: 'Timeline Comment Event']
    "commit_commented" json [note: 'Timeline Line Commented Event']
    "assigned" varchar
    "unassigned" varchar
    "state_change" varchar
    "connected" varchar
    "auto_squash_enabled" varchar
    "merged" varchar
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "issues" {
    "repository" varchar [note: 'Repository where the issue is located.']
    "id" integer [note: 'Unique identifier for the issue.']
    "node_id" varchar [note: 'Unique identifier for the issue node.']
    "url" varchar [note: 'URL to retrieve more details about the issue.']
    "repository_url" varchar [note: 'URL to retrieve more details about the repository.']
    "labels_url" varchar [note: 'URL to retrieve labels associated with the issue.']
    "comments_url" varchar [note: 'URL to retrieve comments on the issue.']
    "events_url" varchar [note: 'URL to retrieve events related to the issue.']
    "html_url" varchar [note: 'URL to view the issue on GitHub.']
    "number" integer [note: 'Number of the issue.']
    "state" varchar [note: 'State of the issue (open/closed).']
    "title" varchar [note: 'Title of the issue.']
    "user" json
    "body" varchar [note: 'The content of the issue.']
    "user_id" integer [note: 'Identifier of the user who opened the issue.']
    "labels" array [note: 'List of labels attached to the issue.']
    "assignee" json
    "assignees" array [note: 'List of users assigned to the issue.']
    "milestone" json [note: 'Details of the milestone associated with the issue.']
    "locked" boolean [note: 'Flag indicating if the issue is locked.']
    "active_lock_reason" varchar [note: 'Reason for the active lock on the issue, if any.']
    "comments" integer [note: 'Number of comments on the issue.']
    "pull_request" json [note: 'Details of a linked pull request, if the issue is a pull request.']
    "closed_at" timestamp [note: 'Date and time when the issue was closed.']
    "created_at" timestamp [note: 'Date and time when the issue was created.']
    "updated_at" timestamp [note: 'Date and time when the issue was last updated.']
    "author_association" varchar [note: 'The association of the author with the issue.']
    "draft" boolean [note: 'Flag indicating if the issue is a draft.']
    "reactions" json
    "timeline_url" varchar [note: 'URL to retrieve the timeline of the issue.']
    "performed_via_github_app" json [note: 'Information related to the GitHub App that performed actions on the issue.']
    "state_reason" varchar [note: 'Reason for the state of the issue.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "organizations" {
    "login" varchar [note: 'Login username of the organization.']
    "id" integer [note: 'Unique identifier of the organization.']
    "node_id" varchar [note: 'Node ID of the organization.']
    "url" varchar [note: 'URL to the organization\'s API endpoint.']
    "repos_url" varchar [note: 'URL to fetch repositories of the organization.']
    "events_url" varchar [note: 'URL to fetch events related to the organization.']
    "hooks_url" varchar [note: 'URL to manage webhooks for the organization.']
    "issues_url" varchar [note: 'URL to fetch issues related to the organization.']
    "members_url" varchar [note: 'URL to fetch members of the organization.']
    "public_members_url" varchar [note: 'URL to fetch public members of the organization.']
    "avatar_url" varchar [note: 'URL to the avatar image of the organization.']
    "description" varchar [note: 'Description of the organization.']
    "name" varchar [note: 'Name of the organization.']
    "company" varchar [note: 'Name of the company associated with the organization.']
    "blog" varchar [note: 'URL to the blog of the organization.']
    "location" varchar [note: 'Physical location of the organization.']
    "email" varchar [note: 'Email address of the organization.']
    "twitter_username" varchar [note: 'Twitter username of the organization.']
    "is_verified" boolean [note: 'Indicates if the organization is verified.']
    "has_organization_projects" boolean [note: 'Indicates if the organization has projects.']
    "has_repository_projects" boolean [note: 'Indicates if the organization has projects tied to repositories.']
    "public_repos" integer [note: 'Number of public repositories owned by the organization.']
    "public_gists" integer [note: 'Number of public gists created by the organization.']
    "followers" integer [note: 'Number of followers the organization has.']
    "following" integer [note: 'Number of accounts the organization is following.']
    "html_url" varchar [note: 'URL to the organization\'s profile page.']
    "created_at" timestamp [note: 'Timestamp indicating when the organization was created.']
    "updated_at" timestamp [note: 'Timestamp indicating when the organization was last updated.']
    "archived_at" timestamp [note: 'Timestamp indicating when the organization was archived.']
    "type" varchar [note: 'Type of the organization.']
    "total_private_repos" integer [note: 'Total number of private repositories owned by the organization.']
    "owned_private_repos" integer [note: 'Number of private repositories owned by the organization.']
    "private_gists" integer [note: 'Number of private gists created by the organization.']
    "disk_usage" integer [note: 'Disk space used by the organization.']
    "collaborators" integer [note: 'Number of collaborators the organization has.']
    "billing_email" varchar [note: 'Email address associated with the organization\'s billing.']
    "default_repository_permission" varchar [note: 'Default permission level for new repositories.']
    "members_can_create_repositories" boolean [note: 'Indicates if members can create repositories.']
    "two_factor_requirement_enabled" boolean [note: 'Indicates if two-factor authentication is required for the organization.']
    "members_allowed_repository_creation_type" varchar [note: 'Type of repositories members are allowed to create.']
    "members_can_create_public_repositories" boolean [note: 'Indicates if members can create public repositories.']
    "members_can_create_private_repositories" boolean [note: 'Indicates if members can create private repositories.']
    "members_can_create_internal_repositories" boolean [note: 'Indicates if members can create internal repositories.']
    "members_can_create_pages" boolean [note: 'Indicates if members can create pages.']
    "members_can_fork_private_repositories" boolean [note: 'Indicates if members can fork private repositories.']
    "web_commit_signoff_required" boolean [note: 'Indicates if web commit signoff is required for the organization.']
    "members_can_create_public_pages" boolean [note: 'Indicates if members can create public pages.']
    "members_can_create_private_pages" boolean [note: 'Indicates if members can create private pages.']
    "plan" json [note: 'Information about the subscription plan of the organization.']
    "advanced_security_enabled_for_new_repositories" boolean [note: 'Indicates if advanced security features are enabled for new repositories within the organization.']
    "dependabot_alerts_enabled_for_new_repositories" boolean [note: 'Indicates if dependabot alerts are enabled for new repositories within the organization.']
    "dependabot_security_updates_enabled_for_new_repositories" boolean [note: 'Indicates if dependabot security updates are enabled for new repositories within the organization.']
    "dependency_graph_enabled_for_new_repositories" boolean [note: 'Indicates if dependency graph is enabled for new repositories within the organization.']
    "secret_scanning_enabled_for_new_repositories" boolean [note: 'Indicates if secret scanning is enabled for new repositories within the organization.']
    "secret_scanning_push_protection_enabled_for_new_repositories" boolean [note: 'Indicates if secret scanning push protection is enabled for new repositories.']
    "secret_scanning_push_protection_custom_link_enabled" boolean [note: 'Indicates if custom link for secret scanning push protection is enabled.']
    "secret_scanning_push_protection_custom_link" varchar [note: 'Custom link for secret scanning push protection.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "project_cards" {
    "url" varchar [note: 'The URL to access the project card.']
    "project_url" varchar [note: 'The URL to access the project that includes the project card.']
    "id" integer [note: 'The unique identifier of the project card.']
    "node_id" varchar [note: 'The unique Node ID of the project card.']
    "note" varchar [note: 'Any notes associated with the project card.']
    "archived" boolean [note: 'Indicates whether the project card is archived or not.']
    "creator" json
    "created_at" timestamp [note: 'The date and time when the project card was created.']
    "updated_at" timestamp [note: 'The date and time when the project card was last updated.']
    "column_url" varchar [note: 'The URL to access the project column associated with the project card.']
    "content_url" varchar [note: 'The URL that provides direct access to the project card\'s content.']
    "repository" varchar [note: 'The repository to which the project card is linked.']
    "project_id" integer [note: 'The unique identifier of the project to which the project card belongs.']
    "column_id" integer [note: 'The unique identifier of the project column that the project card belongs to.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "project_columns" {
    "url" varchar [note: 'The API URL to fetch more details about this project column.']
    "project_url" varchar [note: 'The URL to view the project associated with this column.']
    "cards_url" varchar [note: 'The API URL to fetch the cards in this project column.']
    "id" integer [note: 'The unique identification number of this project column.']
    "node_id" varchar [note: 'The node ID of this project column used in the GraphQL API.']
    "name" varchar [note: 'The name given to this project column.']
    "created_at" timestamp [note: 'The date and time when this project column was created.']
    "updated_at" timestamp [note: 'The date and time when this project column was last updated.']
    "repository" varchar [note: 'The repository to which this project column belongs.']
    "project_id" integer [note: 'The ID of the project to which this column belongs.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "projects" {
    "repository" varchar [note: 'The repository associated with the project.']
    "owner_url" varchar [note: 'The URL to view the owner or creator of the project.']
    "url" varchar [note: 'The URL for accessing the project.']
    "html_url" varchar [note: 'The HTML URL for viewing the project.']
    "columns_url" varchar [note: 'The URL to view the project\'s columns or categories.']
    "id" integer [note: 'The unique identifier for the project.']
    "node_id" varchar [note: 'The Node ID associated with the project.']
    "name" varchar [note: 'The name of the project.']
    "body" varchar [note: 'The description or main content of the project.']
    "number" integer [note: 'The project number or identifier.']
    "state" varchar [note: 'The state or status of the project.']
    "creator" json
    "created_at" timestamp [note: 'The date and time when the project was created.']
    "updated_at" timestamp [note: 'The date and time when the project was last updated.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "projects_v2" {
    "closed" boolean [note: 'Indicates whether the project is closed or not.']
    "created_at" timestamp [note: 'The date and time when the project was created.']
    "creator" json [note: 'Information about the user who created the project.']
    "closed_at" timestamp [note: 'The date and time when the project was closed.']
    "updated_at" timestamp [note: 'The date and time when the project was last updated.']
    "node_id" varchar [note: 'The node ID of the project.']
    "id" integer [note: 'The unique identifier of the project.']
    "number" integer [note: 'The project number.']
    "public" boolean [note: 'Indicates whether the project is public or private.']
    "readme" varchar [note: 'The README content of the project.']
    "short_description" varchar [note: 'A brief description of the project.']
    "template" boolean [note: 'Indicates whether the project is a template or not.']
    "title" varchar [note: 'The title of the project.']
    "url" varchar [note: 'The URL to access the project.']
    "viewerCanClose" boolean [note: 'Indicates whether the current viewer can close the project.']
    "viewerCanReopen" boolean [note: 'Indicates whether the current viewer can reopen the project.']
    "viewerCanUpdate" boolean [note: 'Indicates whether the current viewer can update the project.']
    "owner_id" varchar [note: 'The ID of the project owner.']
    "repository" varchar [note: 'Information about the repository associated with the project.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "pull_request_comment_reactions" {
    "id" integer [note: 'The unique identifier for the reaction.']
    "node_id" varchar [note: 'A unique identifier for the reaction node.']
    "content" varchar [note: 'The type of reaction content, e.g., \'+1\', \'heart\', \'laugh\', etc.']
    "created_at" timestamp [note: 'The timestamp when the reaction was created.']
    "user" json
    "repository" varchar [note: 'The repository associated with the pull request comment.']
    "comment_id" integer [note: 'The ID of the pull request comment to which the reaction belongs.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "pull_request_commits" {
    "sha" varchar [note: 'SHA of the commit.']
    "node_id" varchar [note: 'Node ID of the commit.']
    "commit" json [note: 'Details about the commit related to the pull request.']
    "url" varchar [note: 'URL to access more details about the commit.']
    "html_url" varchar [note: 'URL to view the commit in a web browser.']
    "comments_url" varchar [note: 'URL to retrieve comments related to the commit.']
    "author" json
    "committer" json
    "parents" array [note: 'List of parent commits associated with the commit.']
    "repository" varchar [note: 'Details about the repository where the commit was made.']
    "pull_number" integer [note: 'Number associated with the pull request.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "pull_request_stats" {
    "repository" varchar [note: 'The repository to which the pull request belongs.']
    "id" integer [note: 'The unique identifier of the pull request.']
    "node_id" varchar [note: 'The node ID of the pull request.']
    "number" integer [note: 'The number of the pull request.']
    "merged" boolean [note: 'Indicates if the pull request has been merged.']
    "mergeable" varchar [note: 'Indicates if the pull request is mergeable.']
    "can_be_rebased" boolean [note: 'Indicates whether the pull request can be rebased onto the base branch.']
    "merge_state_status" varchar [note: 'The status of the merge state for the pull request.']
    "merged_by" json [note: 'The user who merged the pull request.']
    "comments" integer [note: 'The total number of comments on the pull request.']
    "review_comments" integer [note: 'The total number of review comments on the pull request.']
    "maintainer_can_modify" boolean [note: 'Indicates if maintainers can modify the pull request.']
    "commits" integer [note: 'The total number of commits in the pull request.']
    "additions" integer [note: 'The total number of lines added in the pull request.']
    "deletions" integer [note: 'The total number of lines deleted in the pull request.']
    "changed_files" integer [note: 'The number of files changed in the pull request.']
    "updated_at" timestamp [note: 'The date and time when the pull request was last updated.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "pull_requests" {
    "repository" varchar [note: 'Repository information']
    "url" varchar [note: 'URL for fetching detailed information about this pull request']
    "id" integer [note: 'Unique identifier for the pull request']
    "node_id" varchar [note: 'Node identifier for the pull request']
    "html_url" varchar [note: 'URL for viewing the pull request on GitHub']
    "diff_url" varchar [note: 'URL to view the diff for this pull request']
    "patch_url" varchar [note: 'URL for fetching the patch file for this pull request']
    "issue_url" varchar [note: 'URL for viewing the issue associated with this pull request']
    "commits_url" varchar [note: 'URL for fetching commits on this pull request']
    "review_comments_url" varchar [note: 'URL for fetching review comments on this pull request']
    "review_comment_url" varchar [note: 'URL for fetching review comments on this pull request']
    "comments_url" varchar [note: 'URL for fetching comments on this pull request']
    "statuses_url" varchar [note: 'URL for fetching status information for this pull request']
    "number" integer [note: 'Number assigned to the pull request']
    "state" varchar [note: 'State of the pull request']
    "locked" boolean [note: 'Indicates if the pull request is locked']
    "title" varchar [note: 'Title of the pull request']
    "user" json
    "body" varchar [note: 'Body content of the pull request']
    "labels" array [note: 'Labels attached to this pull request']
    "milestone" json [note: 'Milestone information for this pull request']
    "active_lock_reason" varchar [note: 'Reason this pull request is locked']
    "created_at" timestamp [note: 'Date and time when the pull request was created']
    "updated_at" timestamp [note: 'Date and time when the pull request was last updated']
    "closed_at" timestamp [note: 'Date and time when the pull request was closed']
    "merged_at" timestamp [note: 'Date and time when the pull request was merged']
    "merge_commit_sha" varchar [note: 'SHA hash of the merged commit']
    "assignee" json
    "assignees" array [note: 'Users assigned to this pull request']
    "requested_reviewers" array [note: 'Requested reviewers for this pull request']
    "requested_teams" array [note: 'Requested teams for this pull request']
    "head" json [note: 'Head branch information']
    "base" json [note: 'Base branch information']
    "_links" json [note: 'Object containing links related to the pull request.']
    "author_association" varchar [note: 'Association of the author with this pull request']
    "auto_merge" json [note: 'Details about automatic merging of this pull request']
    "draft" boolean [note: 'Indicates if the pull request is a draft']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "releases" {
    "repository" varchar [note: 'The repository associated with the release.']
    "url" varchar [note: 'The URL for the release.']
    "html_url" varchar [note: 'The HTML URL for the release.']
    "assets_url" varchar [note: 'The URL to fetch information about the assets linked to this release.']
    "upload_url" varchar [note: 'The URL for uploading assets to the release.']
    "tarball_url" varchar [note: 'The URL for the tarball file of the release.']
    "zipball_url" varchar [note: 'The URL for the zipball file of the release.']
    "id" integer [note: 'The unique identifier for the release']
    "node_id" varchar [note: 'The node ID of the release.']
    "tag_name" varchar [note: 'The tag name of the release.']
    "target_commitish" varchar [note: 'The commit SHA or branch name for the release.']
    "name" varchar [note: 'The name of the release.']
    "body" varchar [note: 'The body of the release.']
    "draft" boolean [note: 'Indicates if the release is a draft.']
    "prerelease" boolean [note: 'Indicates if the release is a prerelease.']
    "created_at" timestamp [note: 'The timestamp of when the release was created.']
    "published_at" timestamp [note: 'The timestamp of when the release was published.']
    "author" json
    "assets" array [note: 'List of assets (e.g., downloadable files) associated with the release']
    "body_html" varchar [note: 'The HTML body of the release.']
    "body_text" varchar [note: 'The text body of the release.']
    "mentions_count" integer [note: 'The count of mentions in the release.']
    "discussion_url" varchar [note: 'The URL for the discussion related to the release.']
    "reactions" json
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "repositories" {
    "id" integer [note: 'Unique identifier of the repository.']
    "node_id" varchar [note: 'Node ID of the repository.']
    "name" varchar [note: 'Name of the repository.']
    "full_name" varchar [note: 'Full name of the repository.']
    "owner" json
    "private" boolean [note: 'Indicates if the repository is private.']
    "html_url" varchar [note: 'URL of the repository\'s GitHub page.']
    "description" varchar [note: 'Brief description of the repository.']
    "fork" boolean [note: 'Indicates if the repository is a fork.']
    "url" varchar [note: 'URL of the repository.']
    "archive_url" varchar [note: 'URL to archive the repository.']
    "assignees_url" varchar [note: 'URL to fetch assignees for issues in the repository.']
    "blobs_url" varchar [note: 'URL to fetch blobs within the repository.']
    "branches_url" varchar [note: 'URL to fetch branches within the repository.']
    "collaborators_url" varchar [note: 'URL to fetch collaborators of the repository.']
    "comments_url" varchar [note: 'URL to fetch comments within the repository.']
    "commits_url" varchar [note: 'URL to fetch commits within the repository.']
    "compare_url" varchar [note: 'URL to compare references within the repository.']
    "contents_url" varchar [note: 'URL to fetch contents within the repository.']
    "contributors_url" varchar [note: 'URL to fetch contributors to the repository.']
    "deployments_url" varchar [note: 'URL to fetch deployments related to the repository.']
    "downloads_url" varchar [note: 'URL to fetch downloads linked to the repository.']
    "events_url" varchar [note: 'URL to fetch events related to the repository.']
    "forks_url" varchar [note: 'URL to fetch forks of the repository.']
    "git_commits_url" varchar [note: 'URL to fetch git commits within the repository.']
    "git_refs_url" varchar [note: 'URL to fetch git references within the repository.']
    "git_tags_url" varchar [note: 'URL to fetch git tags within the repository.']
    "git_url" varchar [note: 'URL for Git protocol to interact with the repository.']
    "issue_comment_url" varchar [note: 'URL to fetch issue comments within the repository.']
    "issue_events_url" varchar [note: 'URL to fetch issue events within the repository.']
    "issues_url" varchar [note: 'URL to fetch issues within the repository.']
    "keys_url" varchar [note: 'URL to fetch keys associated with the repository.']
    "labels_url" varchar [note: 'URL to fetch labels associated with the repository.']
    "languages_url" varchar [note: 'URL to fetch languages used in the repository.']
    "merges_url" varchar [note: 'URL to fetch merges related to the repository.']
    "milestones_url" varchar [note: 'URL to fetch milestones within the repository.']
    "notifications_url" varchar [note: 'URL to manage notifications for the repository.']
    "pulls_url" varchar [note: 'URL to fetch pull requests within the repository.']
    "releases_url" varchar [note: 'URL to fetch releases related to the repository.']
    "ssh_url" varchar [note: 'SSH URL of the repository.']
    "stargazers_url" varchar [note: 'URL to fetch users who starred the repository.']
    "statuses_url" varchar [note: 'URL to fetch commit statuses within the repository.']
    "subscribers_url" varchar [note: 'URL to fetch subscribers of the repository.']
    "subscription_url" varchar [note: 'URL to manage subscriptions to notifications for the repository.']
    "tags_url" varchar [note: 'URL to fetch tags within the repository.']
    "teams_url" varchar [note: 'URL to manage repository teams.']
    "trees_url" varchar [note: 'URL to fetch trees within the repository.']
    "clone_url" varchar [note: 'URL to clone the repository.']
    "mirror_url" varchar [note: 'URL of the mirror repository.']
    "hooks_url" varchar [note: 'URL to manage webhooks for the repository.']
    "svn_url" varchar [note: 'SVN URL of the repository.']
    "homepage" varchar [note: 'URL of the repository\'s homepage.']
    "language" varchar [note: 'Main programming language used in the repository.']
    "forks_count" integer [note: 'Count of forks for the repository.']
    "stargazers_count" integer [note: 'Number of stars the repository has received.']
    "watchers_count" integer [note: 'Count of watchers for the repository.']
    "size" integer [note: 'Size of the repository in kilobytes.']
    "default_branch" varchar [note: 'Default branch of the repository.']
    "open_issues_count" integer [note: 'Count of open issues in the repository.']
    "is_template" boolean [note: 'Indicates if the repository is a template.']
    "topics" array [note: 'Topics associated with the repository.']
    "license" json [note: 'License information of the repository.']
    "has_issues" boolean [note: 'Indicates if the repository has issues enabled.']
    "has_projects" boolean [note: 'Indicates if the repository has projects enabled.']
    "has_wiki" boolean [note: 'Indicates if the repository has a wiki enabled.']
    "has_pages" boolean [note: 'Indicates if the repository has GitHub Pages enabled.']
    "has_downloads" boolean [note: 'Indicates if the repository has downloads available.']
    "archived" boolean [note: 'Indicates if the repository is archived.']
    "disabled" boolean [note: 'Indicates if the repository is disabled.']
    "visibility" varchar [note: 'Visibility status of the repository.']
    "pushed_at" timestamp [note: 'Date and time when the repository was last pushed to.']
    "created_at" timestamp [note: 'Date and time when the repository was created.']
    "updated_at" timestamp [note: 'Date and time when the repository was last updated.']
    "permissions" json [note: 'Permissions granted to different roles for the repository.']
    "allow_forking" boolean [note: 'Indicates if forking is allowed for the repository.']
    "forks" integer [note: 'Forks information related to the repository.']
    "has_discussions" boolean [note: 'Indicates if the repository has discussions.']
    "open_issues" integer [note: 'Number of open issues in the repository.']
    "organization" varchar [note: 'Organization the repository belongs to.']
    "watchers" integer [note: 'Watchers of the repository.']
    "web_commit_signoff_required" boolean [note: 'Indicates if web commit sign-off is required for contributions.']
    "security_and_analysis" json [note: 'Security and analysis settings of the repository.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "review_comments" {
    "repository" varchar [note: 'Information about the repository where the comment was made']
    "url" varchar [note: 'The URL of the API resource for the comment']
    "pull_request_review_id" integer [note: 'The ID of the pull request review to which the comment belongs']
    "id" integer [note: 'The unique identifier of the comment']
    "node_id" varchar [note: 'The unique identifier for the comment node']
    "diff_hunk" varchar [note: 'A snippet of the diff where the comment was made']
    "path" varchar [note: 'The file path where the comment was made']
    "position" integer [note: 'The position of the comment relative to the diff']
    "original_position" integer [note: 'The original position of the comment relative to the diff']
    "commit_id" varchar [note: 'The ID of the commit the comment is associated with']
    "original_commit_id" varchar [note: 'The original commit ID associated with the comment']
    "in_reply_to_id" integer [note: 'The ID of the comment being replied to']
    "user" json
    "body" varchar [note: 'The content of the comment']
    "created_at" timestamp [note: 'The timestamp when the comment was created']
    "updated_at" timestamp [note: 'The timestamp when the comment was last updated']
    "html_url" varchar [note: 'The URL for viewing the comment on GitHub']
    "pull_request_url" varchar [note: 'The URL of the pull request to which the comment belongs']
    "author_association" varchar [note: 'The association of the author of the comment with the repository']
    "_links" json [note: 'Contains links to related resources for the review comment']
    "start_line" integer [note: 'The starting line of the comment reference']
    "original_start_line" integer [note: 'The original starting line of the comment reference']
    "start_side" varchar [note: 'The side in the diff where the comment reference started']
    "line" integer [note: 'The line in the diff where the comment was made']
    "original_line" integer [note: 'The original line for the comment reference']
    "side" varchar [note: 'The side of the diff where the comment was made (e.g., left or right)']
    "subject_type" varchar [note: 'The type of subject the comment is associated with']
    "reactions" json
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "reviews" {
    "repository" varchar [note: 'Information about the repository where the review is posted.']
    "id" integer [note: 'The unique identifier of the review.']
    "node_id" varchar [note: 'The node identifier of the review.']
    "user" json
    "body" varchar [note: 'The content of the review comment.']
    "state" varchar [note: 'The state of the review (e.g., open, closed).']
    "html_url" varchar [note: 'The URL of the review comment.']
    "pull_request_url" varchar [note: 'The URL of the pull request associated with the review.']
    "_links" json [note: 'Contains relevant hyperlinks related to the review data.']
    "submitted_at" timestamp [note: 'The date and time when the review was submitted.']
    "created_at" timestamp [note: 'The date and time when the review was created.']
    "updated_at" timestamp [note: 'The date and time when the review was last updated.']
    "commit_id" varchar [note: 'The unique identifier of the commit associated with the review.']
    "author_association" varchar [note: 'The association of the author of the review with the repository.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "stargazers" {
    "repository" varchar [note: 'The repository that was starred by a user.']
    "user_id" integer [note: 'The unique identifier of the user who starred the repository.']
    "starred_at" timestamp [note: 'The date and time when the user starred the repository.']
    "user" json
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "tags" {
    "repository" varchar [note: 'Repository information related to the tag']
    "name" varchar [note: 'Name of the tag']
    "commit" json [note: 'Information about the commit associated with this tag']
    "zipball_url" varchar [note: 'URL to download a zipball archive of the repository at this tag']
    "tarball_url" varchar [note: 'URL to download a tarball archive of the repository at this tag']
    "node_id" varchar [note: 'Unique identifier of the tag']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "team_members" {
    "login" varchar [note: 'Username of the user']
    "id" integer [note: 'Unique identifier of the user']
    "node_id" varchar [note: 'Node ID associated with the user']
    "avatar_url" varchar [note: 'URL of the user\'s avatar image']
    "gravatar_id" varchar [note: 'Unique identifier of the user\'s Gravatar image']
    "url" varchar [note: 'URL of the user\'s GitHub API endpoint']
    "html_url" varchar [note: 'URL of the user\'s GitHub profile']
    "followers_url" varchar [note: 'URL of the user\'s followers']
    "following_url" varchar [note: 'URL of the users that the user is following']
    "gists_url" varchar [note: 'URL of the user\'s gists']
    "starred_url" varchar [note: 'URL of the repositories starred by the user']
    "subscriptions_url" varchar [note: 'URL of the repositories the user is subscribed to']
    "organizations_url" varchar [note: 'URL of the organizations the user belongs to']
    "repos_url" varchar [note: 'URL of the user\'s repositories']
    "events_url" varchar [note: 'URL of the events performed by the user']
    "received_events_url" varchar [note: 'URL of the received events by the user']
    "type" varchar [note: 'Type of user account (e.g., User or Organization)']
    "site_admin" boolean [note: 'Boolean indicating if the user is a site administrator']
    "organization" varchar [note: 'Name of the organization the user is a part of']
    "team_slug" varchar [note: 'Slug identifier of the user\'s team']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "team_memberships" {
    "state" varchar [note: 'The current state of the team membership (active, pending, etc.).']
    "role" varchar [note: 'The role or position of the user within the team.']
    "url" varchar [note: 'The URL link to access more details about the team membership.']
    "organization" varchar [note: 'The name of the organization the team membership belongs to.']
    "team_slug" varchar [note: 'The unique identifier (slug) of the team the user belongs to.']
    "username" varchar [note: 'The username of the user associated with the team membership.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "teams" {
    "organization" varchar [note: 'The organization to which the team belongs.']
    "id" integer [note: 'The unique identifier of the team.']
    "node_id" varchar [note: 'The node identifier of the team.']
    "url" varchar [note: 'The API URL of the team.']
    "html_url" varchar [note: 'The URL of the team on GitHub.']
    "name" varchar [note: 'The name of the team.']
    "slug" varchar [note: 'The unique URL-friendly name of the team.']
    "description" varchar [note: 'The description of the team.']
    "privacy" varchar [note: 'The privacy setting of the team.']
    "notification_setting" varchar [note: 'The notification setting of the team.']
    "permission" varchar [note: 'The permission level of the team.']
    "members_url" varchar [note: 'The URL to fetch members of the team.']
    "repositories_url" varchar [note: 'The URL to fetch repositories of the team.']
    "parent" json [note: 'The parent team of the team.']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "users" {
    "organization" varchar [note: 'The organization the user belongs to']
    "login" varchar [note: 'The username of the user']
    "id" integer [note: 'The unique identification number of the user']
    "node_id" varchar [note: 'The ID assigned to the user in the GraphQL API']
    "avatar_url" varchar [note: 'The URL of the user\'s avatar image']
    "gravatar_id" varchar [note: 'The Gravatar ID associated with the user\'s email']
    "url" varchar [note: 'The user\'s GitHub API URL']
    "html_url" varchar [note: 'The URL of the user\'s GitHub page']
    "followers_url" varchar [note: 'The URL listing the user\'s followers']
    "following_url" varchar [note: 'The URL listing the users being followed by the user']
    "gists_url" varchar [note: 'The URL of the user\'s gists']
    "starred_url" varchar [note: 'The URL listing repositories starred by the user']
    "subscriptions_url" varchar [note: 'The URL listing repositories the user is subscribed to']
    "organizations_url" varchar [note: 'The URL listing organizations the user belongs to']
    "repos_url" varchar [note: 'The URL listing repositories owned by the user']
    "events_url" varchar [note: 'The URL of the events that the user has been involved in']
    "received_events_url" varchar [note: 'The URL of events received by the user']
    "type" varchar [note: 'The type of user account (e.g., User or Organization)']
    "site_admin" boolean [note: 'Specifies if the user is a GitHub site administrator']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "workflow_jobs" {
    "id" integer [note: 'Identifier of the job']
    "run_id" integer [note: 'Identifier of the run associated with the job']
    "workflow_name" varchar [note: 'Name of the workflow associated with the job']
    "head_branch" varchar [note: 'Name of the branch where the job was triggered']
    "run_url" varchar [note: 'URL to view the run details associated with the job']
    "run_attempt" integer [note: 'Number of the run attempt for the job']
    "node_id" varchar [note: 'Node ID of the job']
    "head_sha" varchar [note: 'Commit SHA associated with the job']
    "url" varchar [note: 'URL to fetch the details of the job']
    "html_url" varchar [note: 'URL to view the job details in a web browser']
    "status" varchar [note: 'Status of the job (e.g., in_progress, completed)']
    "conclusion" varchar [note: 'Conclusion of the job execution (e.g., success, failure)']
    "created_at" timestamp [note: 'Timestamp when the job was created']
    "started_at" timestamp [note: 'Timestamp when the job was started']
    "completed_at" timestamp [note: 'Timestamp when the job was completed']
    "name" varchar [note: 'Name of the job']
    "steps" array [note: 'List of steps within the job']
    "check_run_url" varchar [note: 'URL to view the check run associated with the job']
    "labels" array [note: 'Labels associated with the job']
    "runner_id" integer [note: 'Identifier of the runner']
    "runner_name" varchar [note: 'Name of the runner']
    "runner_group_id" integer [note: 'Identifier of the runner group']
    "runner_group_name" varchar [note: 'Name of the runner group']
    "repository" varchar [note: 'Repository information associated with the job']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "workflow_runs" {
    "id" integer [note: 'ID of the workflow run.']
    "name" varchar [note: 'Name of the workflow.']
    "node_id" varchar [note: 'Node ID of the workflow run.']
    "head_branch" varchar [note: 'The branch associated with the head commit.']
    "head_sha" varchar [note: 'SHA of the head commit.']
    "path" varchar [note: 'The path where the workflow file is located.']
    "display_title" varchar [note: 'Title to display for the workflow run.']
    "run_number" integer [note: 'The unique number assigned to the workflow run.']
    "event" varchar [note: 'The event that triggered the workflow run.']
    "status" varchar [note: 'The current status of the workflow run.']
    "conclusion" varchar [note: 'The outcome or result of the workflow run.']
    "workflow_id" integer [note: 'ID of the workflow associated with the run.']
    "check_suite_id" integer [note: 'ID of the associated GitHub check suite.']
    "check_suite_node_id" varchar [note: 'Node ID of the associated GitHub check suite.']
    "url" varchar [note: 'URL to access details of the workflow run.']
    "html_url" varchar [note: 'URL to view the workflow run on GitHub.']
    "pull_requests" array [note: 'List of all pull requests associated with the workflow run.']
    "created_at" timestamp [note: 'The timestamp when the workflow run was created.']
    "updated_at" timestamp [note: 'The timestamp when the workflow run was last updated.']
    "run_attempt" integer [note: 'Specifies the attempt number of the workflow run.']
    "referenced_workflows" array [note: 'List of workflows referenced by the workflow runs']
    "run_started_at" timestamp [note: 'The timestamp when the workflow run started.']
    "jobs_url" varchar [note: 'URL to access jobs associated with the workflow run.']
    "logs_url" varchar [note: 'URL to access logs generated by the workflow run.']
    "check_suite_url" varchar [note: 'URL to access the check suite details.']
    "artifacts_url" varchar [note: 'URL to access artifacts generated by the workflow run.']
    "cancel_url" varchar [note: 'URL to cancel the workflow run if supported.']
    "rerun_url" varchar [note: 'URL to rerun the workflow.']
    "previous_attempt_url" varchar [note: 'URL to access the previous attempt of the workflow run.']
    "workflow_url" varchar [note: 'URL to access details of the workflow.']
    "head_commit" json [note: 'Details about the commit associated with the workflow run.']
    "repository" json [note: 'Details about the repository where the workflow run is executed.']
    "head_repository" json [note: 'Information about the repository where the workflow was triggered.']
    "actor" json
    "triggering_actor" json
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}

Table "workflows" {
    "id" integer [note: 'Unique identifier for the workflow']
    "node_id" varchar [note: 'Node ID of the workflow']
    "name" varchar [note: 'Name of the workflow']
    "path" varchar [note: 'Path to the workflow in the repository']
    "state" varchar [note: 'Current state of the workflow']
    "created_at" timestamp [note: 'Date and time when the workflow was created']
    "updated_at" timestamp [note: 'Date and time when the workflow was last updated']
    "url" varchar [note: 'URL to access detailed information about the workflow']
    "html_url" varchar [note: 'URL to view the workflow on GitHub\'s web interface']
    "badge_url" varchar [note: 'URL for the badge that represents the workflow status']
    "repository" varchar [note: 'Repository information associated with the workflow']
    "_airbyte_extracted_at" timestamp [note: 'Timestamp when the record was extracted from the source']
    "_airbyte_meta" json [note: 'Metadata about the record']
    "_airbyte_raw_id" varchar [note: 'Unique identifier for the raw record']
}
# Morph Project Cursor Rules

# Type Hints

- Use modern type hints:
  - `list` instead of `List`
  - `dict` instead of `Dict`
  - `str | None` instead of `Optional[str]`
  - `tuple` instead of `Tuple`
  - `set` instead of `Set`
  - `Any` is still valid when needed
  - Use `|` for union types (e.g., `str | int` instead of `Union[str, int]`)

# Code Style

- Follow modern PEP guidelines
- Use double quotes for strings
- Use triple quotes for docstrings
- Use type hints for all function parameters and return values
- Use descriptive variable names
- Keep functions focused and small
- Use meaningful docstrings with Args/Returns sections

# Project Structure

- TODO

# Testing

- Write unit tests for all new functionality
- Use pytest fixtures for test setup
- Mock external dependencies
- Use meaningful test names that describe the behavior being tested
- Include both positive and negative test cases

# Documentation

- Keep README.md up to date
- Document all public APIs
- Include examples in docstrings
- Update CHANGELOG.md for significant changes
- Keep documentation in `docs/` directory

# Git Practices

- Write clear commit messages
- Keep commits focused and atomic
- Use feature branches for new development
- Update CHANGELOG.md before merging to main
- Tag releases with semantic versioning

# Dependencies

- Use `pyproject.toml` for project metadata
- Keep dependencies up to date
- Use `uv` for dependency management
- Document all dependencies in `pyproject.toml`

# Error Handling

- Use custom exceptions for project-specific errors
- Include meaningful error messages
- Handle edge cases gracefully
- Log errors appropriately

# Performance

- Profile code when performance is critical
- Use appropriate data structures
- Consider memory usage
- Cache expensive operations when appropriate

# Security

- Never commit sensitive data
- Use environment variables for secrets
- Validate user input
- Follow security best practices

# Accessibility

- Use semantic HTML in templates
- Include alt text for images
- Ensure proper color contrast
- Support keyboard navigation

# Internationalization

- Use translation strings
- Support multiple locales
- Handle different date/time formats
- Consider RTL languages

# Code Review

- Review code for:
  - Type safety
  - Error handling
  - Test coverage
  - Documentation
  - Performance
  - Security
  - Accessibility
  - Internationalization

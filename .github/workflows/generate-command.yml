name: On-Demand Generate

on:
  workflow_dispatch:
    inputs:
      source_name:
        description: "Source Name (e.g., hubspot, facebook_marketing)"
        type: string
        required: true
      pr:
        description: "PR Number"
        type: number
        required: false
      comment-id:
        description: "Comment ID (Optional)"
        type: number
        required: false
      comment-text:
        description: "Full comment text (optional, unused)"
        type: string
        required: false

jobs:
  generate-on-demand:
    runs-on: ubuntu-latest
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo "run-url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      # Setup for existing PR if PR number is provided
      - name: Get PR info (existing PR)
        id: pr-info
        if: ${{ github.event.inputs.pr }}
        run: |
          PR_JSON=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.inputs.pr }})
          echo "repo=$(echo "$PR_JSON" | jq -r .head.repo.full_name)" >> $GITHUB_OUTPUT
          echo "branch=$(echo "$PR_JSON" | jq -r .head.ref)" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Append comment with job run link (existing PR)
        id: first-comment-action
        if: ${{ github.event.inputs.comment-id }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.inputs.comment-id }}
          issue-number: ${{ github.event.inputs.pr }}
          body: |
            > **Generate Job Info**
            >
            > This job attempts to generate mappings for source '${{ github.event.inputs.source_name }}' using `morph generate` command. If any changes
            > are made, those changes will be automatically committed and pushed back to the PR.
            >
            > Note: This job can only be run by maintainers. On PRs from forks, this command requires
            > that the PR author has enabled the `Allow edits from maintainers` option.

            > Generate job started... [Check job output.][1]

            [1]: ${{ steps.vars.outputs.run-url }}

      - name: Checkout (new PR)
        if: ${{ ! github.event.inputs.pr }}
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      # Setup for new PR if no PR number is provided
      - name: Create branch (new PR)
        id: new-branch
        if: ${{ ! github.event.inputs.pr }}
        run: |
          TIMESTAMP=$(date +%s)
          SOURCE_NAME="${{ github.event.inputs.source_name }}"
          BRANCH_NAME="devin/${TIMESTAMP}-generate-${SOURCE_NAME}"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b $BRANCH_NAME

      # Checkout repository
      - name: Checkout (existing PR)
        if: ${{ ! github.event.inputs.pr }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.branch }}
          repository: ${{ steps.pr-info.outputs.repo }}
          token: ${{ github.token }}

      # Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.11"

      - name: Create virtual environment
        run: uv venv

      - name: Install poethepoet
        run: uv tool install poethepoet

      - name: Install dependencies
        run: poe install

      # Run the generate command
      - name: Run generate command
        id: generate
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GCP_GSM_CREDENTIALS: ${{ secrets.GCP_GSM_CREDENTIALS }}
        run: |
          # Run morph generate with the provided source_name and default project_name
          uv run morph build ${{ github.event.inputs.source_name || 'klaviyo' }} --with-generate

          # Store the exit code
          GENERATE_EXIT_CODE=$?
          echo "exit_code=$GENERATE_EXIT_CODE" >> $GITHUB_OUTPUT

          if [ $GENERATE_EXIT_CODE -ne 0 ]; then
            echo "Generate command failed with exit code $GENERATE_EXIT_CODE"
            echo "generate_success=false" >> $GITHUB_ENV
            exit 0
          else
            echo "Generate command succeeded"
            echo "generate_success=true" >> $GITHUB_ENV
          fi

      # Handle git operations only if generate was successful
      - name: Commit and push changes
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Add changes
          git add .

          # Check if there are any changes
          if git diff --staged --quiet; then
            echo "Changes found after running generate command."
            echo "no_changes=false" >> $GITHUB_OUTPUT

            # Commit changes
            git commit -m "Generate mappings for ${{ github.event.inputs.source_name }} source"

            # Push changes
            git push origin HEAD
          else
            echo "No changes found after running generate command."
            echo "no_changes=true" >> $GITHUB_OUTPUT
          fi

          TITLE="feat(morph): Generate mappings for ${{ github.event.inputs.source_name }}"
          BODY="Generate mappings for source: ${{ github.event.inputs.source_name }}, project: airbyte-interop. Link to Devin run: https://app.devin.ai/sessions/f4d085b23ec0438fab16a8e988a1b8eb. Requested by: Aaron (\"AJ\") Steers (aj@airbyte.io)"

          # Create PR
          PR_URL=$(gh pr create \
            --title "$TITLE" \
            --body "$BODY" \
            --repo ${{ github.repository }})

          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

      # Success/failure comments for existing PR
      - name: Append success comment (existing PR)
        uses: peter-evans/create-or-update-comment@v4
        if: ${{ success() && github.event.inputs.comment-id }}
        with:
          comment-id: ${{ github.event.inputs.comment-id }}
          reactions: hooray
          body: |
            > ✅ Generate command completed successfully.

      - name: Append failure comment (existing PR)
        uses: peter-evans/create-or-update-comment@v4
        if: ${{ failure() && github.event.inputs.comment-id }}
        with:
          comment-id: ${{ github.event.inputs.comment-id }}
          reactions: confused
          body: |
            > ❌ Generate command failed.

      # Success/failure messages for new PR
      - name: Success message for new PR
        if: ${{ github.event_name == 'workflow_dispatch' && success() && steps.create-pr.outputs.pr_url }}
        run: |
          echo "✅ Generate command completed successfully." | tee $GITHUB_JOB_SUMMARY
          echo "PR created: ${{ steps.create-pr.outputs.pr_url }}" | tee $GITHUB_JOB_SUMMARY
